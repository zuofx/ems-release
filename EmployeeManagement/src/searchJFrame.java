/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import javax.swing.table.*;
/**
 *
 * @author truong
 */
public class searchJFrame extends javax.swing.JFrame {
    
    public Hashtable theHT;
    public DefaultTableModel model;
    public FileManager tFiles;
    /**
     * Creates new form editJFrame
     */
    public searchJFrame() {
        initComponents();
    }
    
    public void setHT(Hashtable inHT) {
        theHT = inHT;
    }
    public void setTF(FileManager textF) {
        tFiles = textF;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchTable = new javax.swing.JTable();
        editButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        netAnnualField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Employee Manager");

        jLabel1.setText("Input Employee NO. to get info");

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        searchButton.setText("SEARCH");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        searchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", ""
            }
        ));
        searchTable.setFocusable(false);
        jScrollPane1.setViewportView(searchTable);

        editButton.setText("EDIT EMPLOYEE");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        jButton1.setText("EXIT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        removeButton.setText("REMOVE EMPLOYEE");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        jLabel2.setText(" Manage Employee:");

        jLabel3.setText("Net Annual Income:");

        netAnnualField.setEditable(false);
        netAnnualField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        netAnnualField.setText("0");

        jLabel4.setText("$");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(searchField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 907, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(netAnnualField, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(editButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jLabel3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(netAnnualField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editButton)
                    .addComponent(jButton1)
                    .addComponent(removeButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        String empNumString = searchField.getText();
        int empNum = 0;
        if (empNumString == empNumString) {
            String check = null;
            if (empNumString.length() > 6) {
                System.out.println("Employee Number is too long.");
                return;
                    
            }
            if (empNumString.length() < 6) {
                    System.out.println("Employee Number is too short.");
                    return;
                    
            }
            
            for (int e = 0; e < empNumString.length(); e++) {

                if (Character.isLetter(empNumString.charAt(e)) == true) {
                    System.out.println("Not a valid integer.");
                    check = "flag";
                    return;
                }
            }

            if (check !=  "flag") {
                empNum = Integer.parseInt(empNumString);
            }
        }
        EmployeeInfo theEmp = theHT.retrieve(empNum);
        
        if (theEmp == null) {
            System.out.println("Could not find a matching employee ID.");
            
        }else {
            
            int htSize = theHT.getNumInHashtable();
            int empCounter = 0;
            
            if (theEmp instanceof FTE) {
                FTE theFTE = (FTE) theEmp;
                model = new DefaultTableModel(new Object[] {"Status",
                                                            "Emp. ID",
                                                            "First Name",
                                                            "Last Name",
                                                            "Gender",
                                                            "Location",
                                                            "Deduction Rate",
                                                            "Yearly Salary",}, htSize);
                searchTable.setModel(model);
                searchTable.setAutoCreateColumnsFromModel(true);
                model.setValueAt("Full Time", empCounter, 0);
                model.setValueAt(theEmp.getEmpNum(), empCounter, 1);
                model.setValueAt(theEmp.getFirstName(), empCounter, 2);
                model.setValueAt(theEmp.getLastName(), empCounter, 3);
                //model.setValueAt(theEmp.gender, empCounter, 4);
                model.setValueAt(theEmp.workLoc, empCounter, 5);
                model.setValueAt(theEmp.deductRate, empCounter, 6);
                model.setValueAt(theFTE.yearlySalary, empCounter, 7);
                
                if (theEmp.gender == 0) {
                    model.setValueAt("Male", empCounter, 4);
                }
                if (theEmp.gender == 1) {
                    model.setValueAt("Female", empCounter, 4);
                }
                if (theEmp.gender == 2) {
                    model.setValueAt("Other", empCounter, 4);
                }
                double netAnnual = theFTE.calcAnnualSalary();
                String stringNetAnnual = Double.toString(netAnnual);
                netAnnualField.setText(stringNetAnnual);
            }
            
            if (theEmp instanceof PTE) {
                model = new DefaultTableModel(new Object[] {"Status",
                                                            "Emp. ID",
                                                            "First Name",
                                                            "Last Name",
                                                            "Gender",
                                                            "Location",
                                                            "Deduction Rate",
                                                            "Hourly Wage",
                                                            "Hours per week",
                                                            "Weeks per year"}, htSize);
                searchTable.setModel(model);
                searchTable.setAutoCreateColumnsFromModel(true);
                PTE thePTE = (PTE) theEmp;
                model.setValueAt("Part Time", empCounter, 0);
                model.setValueAt(theEmp.getEmpNum(), empCounter, 1);
                model.setValueAt(theEmp.getFirstName(), empCounter, 2);
                model.setValueAt(theEmp.getLastName(), empCounter, 3);
                //model.setValueAt(theEmp.gender, empCounter, 4);
                model.setValueAt(theEmp.workLoc, empCounter, 5);
                model.setValueAt(theEmp.deductRate, empCounter, 6);
                model.setValueAt(thePTE.hourlyWage, empCounter, 7);
                model.setValueAt(thePTE.hoursPerWeek, empCounter, 8);
                model.setValueAt(thePTE.weeksPerYear, empCounter, 9);
                if (theEmp.gender == 0) {
                    model.setValueAt("Male", empCounter, 4);
                }
                if (theEmp.gender == 1) {
                    model.setValueAt("Female", empCounter, 4);
                }
                if (theEmp.gender == 2) {
                    model.setValueAt("Other", empCounter, 4);
                }
                double netAnnual = thePTE.calcAnnualSalary();
                String stringNetAnnual = Double.toString(netAnnual);
                netAnnualField.setText(stringNetAnnual);
            }
            
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
        String empNumString = searchField.getText();
        int empNum = 0;
        if (empNumString == empNumString) {
            String check = null;
            if (empNumString.length() > 6) {
                System.out.println("Employee Number is too long.");
                return;
                    
            }
            if (empNumString.length() < 6) {
                    System.out.println("Employee Number is too short.");
                    return;
                    
            }
            
            for (int e = 0; e < empNumString.length(); e++) {

                if (Character.isLetter(empNumString.charAt(e)) == true) {
                    System.out.println("Not a valid integer.");
                    check = "flag";
                    return;
                }
            }

            if (check !=  "flag") {
                empNum = Integer.parseInt(empNumString);
            }
        }
        EmployeeInfo theEmp = theHT.retrieve(empNum);
        
        if (theEmp == null) {
            System.out.println("Could not find a matching employee ID.");
            
        }else {
            
            int htSize = theHT.getNumInHashtable();
            int empCounter = 0;
            
            if (theEmp instanceof FTE) {
                FTE theFTE = (FTE) theEmp;
                model = new DefaultTableModel(new Object[] {"Status",
                                                            "Emp. ID",
                                                            "First Name",
                                                            "Last Name",
                                                            "Gender",
                                                            "Location",
                                                            "Deduction Rate",
                                                            "Yearly Salary",}, 1);
                searchTable.setModel(model);
                searchTable.setAutoCreateColumnsFromModel(true);
                model.setValueAt("Full Time", empCounter, 0);
                model.setValueAt(theEmp.getEmpNum(), empCounter, 1);
                model.setValueAt(theEmp.getFirstName(), empCounter, 2);
                model.setValueAt(theEmp.getLastName(), empCounter, 3);
                //model.setValueAt(theEmp.gender, empCounter, 4);
                model.setValueAt(theEmp.workLoc, empCounter, 5);
                model.setValueAt(theEmp.deductRate, empCounter, 6);
                model.setValueAt(theFTE.yearlySalary, empCounter, 7);
                if (theEmp.gender == 0) {
                    model.setValueAt("Male", empCounter, 4);
                }
                if (theEmp.gender == 1) {
                    model.setValueAt("Female", empCounter, 4);
                }
                if (theEmp.gender == 2) {
                    model.setValueAt("Other", empCounter, 4);
                }
                double netAnnual = theFTE.calcAnnualSalary();
                String stringNetAnnual = Double.toString(netAnnual);
                netAnnualField.setText(stringNetAnnual);
            }
            
            if (theEmp instanceof PTE) {
                model = new DefaultTableModel(new Object[] {"Status",
                                                            "Emp. ID",
                                                            "First Name",
                                                            "Last Name",
                                                            "Gender",
                                                            "Location",
                                                            "Deduction Rate",
                                                            "Hourly Wage",
                                                            "Hours per week",
                                                            "Weeks per year"}, 1);
                searchTable.setModel(model);
                searchTable.setAutoCreateColumnsFromModel(true);
                PTE thePTE = (PTE) theEmp;
                model.setValueAt("Part Time", empCounter, 0);
                model.setValueAt(theEmp.getEmpNum(), empCounter, 1);
                model.setValueAt(theEmp.getFirstName(), empCounter, 2);
                model.setValueAt(theEmp.getLastName(), empCounter, 3);
                //model.setValueAt(theEmp.gender, empCounter, 4);
                model.setValueAt(theEmp.workLoc, empCounter, 5);
                model.setValueAt(theEmp.deductRate, empCounter, 6);
                model.setValueAt(thePTE.hourlyWage, empCounter, 7);
                model.setValueAt(thePTE.hoursPerWeek, empCounter, 8);
                model.setValueAt(thePTE.weeksPerYear, empCounter, 9);
                if (theEmp.gender == 0) {
                    model.setValueAt("Male", empCounter, 4);
                }
                if (theEmp.gender == 1) {
                    model.setValueAt("Female", empCounter, 4);
                }
                if (theEmp.gender == 2) {
                    model.setValueAt("Other", empCounter, 4);
                }
                double netAnnual = thePTE.calcAnnualSalary();
                String stringNetAnnual = Double.toString(netAnnual);
                netAnnualField.setText(stringNetAnnual);
            }
            
        }
    }//GEN-LAST:event_searchFieldActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
        String empNumString = searchField.getText();
        int empNum = 0;
        if (empNumString == empNumString) {
            String check = null;
            if (empNumString.length() > 6) {
                System.out.println("Employee Number is too long.");
                return;
                    
            }
            if (empNumString.length() < 6) {
                    System.out.println("Employee Number is too short.");
                    return;
                    
            }
            
            for (int e = 0; e < empNumString.length(); e++) {

                if (Character.isLetter(empNumString.charAt(e)) == true) {
                    System.out.println("Not a valid integer.");
                    check = "flag";
                    return;
                }
            }

            if (check !=  "flag") {
                empNum = Integer.parseInt(empNumString);
            }
        }
        EmployeeInfo theEmp = theHT.retrieve(empNum);
        editJFrame editJF = new editJFrame();
        if (theEmp == null) {
            System.out.println("Cannnot edit because the Employee does not exist.");
        }else {
            editJF.setTitle("Editting Employee NO. " + theEmp.employeeNum);
            editJF.setVisible(true);
            editJF.setHT(theHT);
            editJF.setEMP(theEmp);
            editJF.setTF(tFiles);
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        String empNumString = searchField.getText();
        int empNum = 0;
        String check = null;
        
        
        
        if (empNumString.length() > 6) {
            System.out.println("Employee Number is too long.");
            return;

        }
        if (empNumString.length() < 6) {
                System.out.println("Employee Number is too short.");
                return;

        }

        for (int e = 0; e < empNumString.length(); e++) {

            if (Character.isLetter(empNumString.charAt(e)) == true) {
                System.out.println("Not a valid integer.");
                check = "flag";
                return;
            }
        }

        if (check !=  "flag") {
            empNum = Integer.parseInt(empNumString);
        }
        EmployeeInfo theEmp = theHT.retrieve(empNum);
        
        removeConfirmJFrame confirmJF = new removeConfirmJFrame();
        confirmJF.setVisible(true);
        confirmJF.setTitle("Removing Employee NO. " + theEmp.employeeNum);
        confirmJF.setHT(theHT);
        confirmJF.setEMP(theEmp);
        confirmJF.setTF(tFiles);
        
    }//GEN-LAST:event_removeButtonActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(searchJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(searchJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(searchJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(searchJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new searchJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton editButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField netAnnualField;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JTable searchTable;
    // End of variables declaration//GEN-END:variables
}
