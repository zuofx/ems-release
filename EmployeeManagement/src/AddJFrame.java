/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author truong
 */
import java.util.Random;
public class AddJFrame extends javax.swing.JFrame {
    
    //ATTRIBUTES
    public Hashtable addHT;
    public AddJFrame thisAJF;
    public FileManager tFiles;

    /**
     * Creates new form AddJFrame
     */
    public AddJFrame() {
        
        initComponents();
        partTimeFrame.setVisible(false);   

    }
    public void setHT(Hashtable theHT) {
        addHT = theHT;
    }
    public void setJF(AddJFrame theAJF) {
        thisAJF = theAJF;
    }
    public void setTF(FileManager setTF) {
        tFiles = setTF;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        empNoButtonGroup = new javax.swing.ButtonGroup();
        empStatButtonGroup = new javax.swing.ButtonGroup();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        genderGroup = new javax.swing.ButtonGroup();
        deductGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        setEmpNum = new javax.swing.JRadioButton();
        genEmpNum = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        inputEmpNum = new javax.swing.JTextField();
        finishAdd = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        inputFirstName = new javax.swing.JTextField();
        inputLastName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        fullTimeStatus = new javax.swing.JRadioButton();
        partTimeStatus = new javax.swing.JRadioButton();
        fullTimeFrame = new javax.swing.JInternalFrame();
        jLabel6 = new javax.swing.JLabel();
        annualSalaryField = new javax.swing.JTextField();
        partTimeFrame = new javax.swing.JInternalFrame();
        jLabel7 = new javax.swing.JLabel();
        hoursField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        weeksField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        yearsField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        maleGender = new javax.swing.JRadioButton();
        femaleGender = new javax.swing.JRadioButton();
        otherGender = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        inputWorkLoc = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        deductField = new javax.swing.JTextField();
        useDefault = new javax.swing.JRadioButton();
        useCustom = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        exitButton = new javax.swing.JButton();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add New Employee");
        setResizable(false);

        jLabel1.setText("Employee Number:");
        jLabel1.setToolTipText("");
        jLabel1.setFocusable(false);

        empNoButtonGroup.add(setEmpNum);
        setEmpNum.setText("Custom Employee Number");
        setEmpNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setEmpNumActionPerformed(evt);
            }
        });

        empNoButtonGroup.add(genEmpNum);
        genEmpNum.setText("Generate Employee Number");
        genEmpNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genEmpNumActionPerformed(evt);
            }
        });

        jLabel2.setText("Employee NO.");

        inputEmpNum.setEditable(false);
        inputEmpNum.setToolTipText("6 digit employee number.");
        inputEmpNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputEmpNumActionPerformed(evt);
            }
        });

        finishAdd.setText("ADD");
        finishAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishAddActionPerformed(evt);
            }
        });

        jLabel3.setText("First Name:");
        jLabel3.setToolTipText("");
        jLabel3.setFocusable(false);

        jLabel4.setText("Last Name:");
        jLabel4.setToolTipText("");
        jLabel4.setFocusable(false);

        inputFirstName.setToolTipText("6 digit employee number.");
        inputFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFirstNameActionPerformed(evt);
            }
        });

        inputLastName.setToolTipText("6 digit employee number.");
        inputLastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputLastNameActionPerformed(evt);
            }
        });

        jLabel5.setText("Employee Status:");
        jLabel5.setFocusable(false);

        empStatButtonGroup.add(fullTimeStatus);
        fullTimeStatus.setSelected(true);
        fullTimeStatus.setText("Full-Time Employee");
        fullTimeStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullTimeStatusActionPerformed(evt);
            }
        });

        empStatButtonGroup.add(partTimeStatus);
        partTimeStatus.setText("Part-Time Employee");
        partTimeStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                partTimeStatusActionPerformed(evt);
            }
        });

        fullTimeFrame.setTitle("Full-Time Employee Information");
        fullTimeFrame.setFocusable(false);
        fullTimeFrame.setMinimumSize(new java.awt.Dimension(313, 163));
        fullTimeFrame.setVisible(true);

        jLabel6.setText("Annual Salary:");

        javax.swing.GroupLayout fullTimeFrameLayout = new javax.swing.GroupLayout(fullTimeFrame.getContentPane());
        fullTimeFrame.getContentPane().setLayout(fullTimeFrameLayout);
        fullTimeFrameLayout.setHorizontalGroup(
            fullTimeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fullTimeFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fullTimeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(annualSalaryField))
                .addContainerGap(212, Short.MAX_VALUE))
        );
        fullTimeFrameLayout.setVerticalGroup(
            fullTimeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fullTimeFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(annualSalaryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        partTimeFrame.setTitle("Part-Time Employee Information");
        partTimeFrame.setFocusable(false);
        partTimeFrame.setMinimumSize(new java.awt.Dimension(313, 150));
        partTimeFrame.setVisible(true);

        jLabel7.setText("Hourly wage:");

        hoursField.setFocusable(false);

        jLabel8.setText("Hours per week:");

        weeksField.setFocusable(false);

        jLabel9.setText("Weeks per year:");

        yearsField.setFocusable(false);

        javax.swing.GroupLayout partTimeFrameLayout = new javax.swing.GroupLayout(partTimeFrame.getContentPane());
        partTimeFrame.getContentPane().setLayout(partTimeFrameLayout);
        partTimeFrameLayout.setHorizontalGroup(
            partTimeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(partTimeFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(partTimeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(partTimeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(hoursField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(weeksField, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(yearsField, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(199, Short.MAX_VALUE))
        );
        partTimeFrameLayout.setVerticalGroup(
            partTimeFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(partTimeFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hoursField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(weeksField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(yearsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jLabel10.setText("Gender:");

        genderGroup.add(maleGender);
        maleGender.setText("Male");

        genderGroup.add(femaleGender);
        femaleGender.setText("Female");

        genderGroup.add(otherGender);
        otherGender.setText("Other");

        jLabel11.setText("Work Location:");

        jLabel12.setText("Deduction Rate:");

        deductField.setEditable(false);
        deductField.setText("0.21");
        deductField.setFocusable(false);

        deductGroup.add(useDefault);
        useDefault.setSelected(true);
        useDefault.setText("Use Default Rate");
        useDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useDefaultActionPerformed(evt);
            }
        });

        deductGroup.add(useCustom);
        useCustom.setText("Use Custom Rate");
        useCustom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useCustomActionPerformed(evt);
            }
        });

        jLabel13.setText("(!) USE PERCENTAGE IN DECIMALS");

        exitButton.setText("EXIT");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1)
                                .addComponent(setEmpNum)
                                .addComponent(genEmpNum)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(inputEmpNum, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(inputFirstName))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(inputLastName)))
                            .addComponent(jLabel5)
                            .addComponent(fullTimeStatus)
                            .addComponent(partTimeStatus)
                            .addComponent(jLabel10)
                            .addComponent(maleGender)
                            .addComponent(femaleGender)
                            .addComponent(otherGender))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(fullTimeFrame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(partTimeFrame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(inputWorkLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(useDefault)
                            .addComponent(useCustom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deductField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(finishAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exitButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setEmpNum)
                        .addGap(8, 8, 8)
                        .addComponent(genEmpNum)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputEmpNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inputFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(inputLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fullTimeStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(partTimeStatus)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maleGender)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(femaleGender)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(otherGender)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputWorkLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(useDefault)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(useCustom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deductField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fullTimeFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(partTimeFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(finishAdd)
                    .addComponent(exitButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setEmpNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setEmpNumActionPerformed
        // Makes the employee number field editable if the "Custom employee number" is selected
        inputEmpNum.setEditable(true);
    }//GEN-LAST:event_setEmpNumActionPerformed

    private void genEmpNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genEmpNumActionPerformed
        // Generates a random 6 digit number when the "Generate Employee Number" button is selected
        inputEmpNum.setEditable(false);
        Random rand = new Random();
        int n = rand.nextInt(999999);
        
        while (n < 100000) {
            n = rand.nextInt(999999);
        }
        
        boolean check = addHT.checkDuplicateNum(n);
        if (check == true) {
            System.out.println("Generated a duplicate Employee Number, regenerating...");
            genEmpNumActionPerformed(evt);
        }
        
        inputEmpNum.setText(Integer.toString(n));
    }//GEN-LAST:event_genEmpNumActionPerformed

    private void inputEmpNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputEmpNumActionPerformed
        // nothing here
    }//GEN-LAST:event_inputEmpNumActionPerformed

    private void finishAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishAddActionPerformed
        // TODO add your handling code here:
        
        // <editor-fold defaultstate="collapsed" desc="Basic Checks">  
        String empNumString = inputEmpNum.getText();
        int len = empNumString.length();
        int empNum = 0;
        double salaryAnnual = 0;
        double wageHours = 0;
        double weeksVal = 0;
        double yearsVal = 0;
        int gender = 0;
        if (len <= 0) { // Check for not empty employee number input
            System.out.println("Nothing in Employee Number");
        }
        // Check validity of String inputs //
        String firstName = inputFirstName.getText();
        if (firstName.length() <= 0) { // Check if first name is not empty
            System.out.println("Nothing in First Name");
        }
        String lastName = inputLastName.getText();
        if (lastName.length() <= 0) { // Check if last name is not empty
            System.out.println("Nothing in Last Name");
        }
        String workLoc = inputWorkLoc.getText();
        if (lastName.length() <= 0) { // Check if work location is not empty
            System.out.println("Nothing in Work Location");
        }
        // // // //
        
        String check = null;
        if (empNumString.length() > 6) { // Check if the employee number is too long
            System.out.println("Employee Number is too long.");
            return;

        }
        if (empNumString.length() < 6) { // Check if the employee number is too short
                System.out.println("Employee Number is too short.");
                return;

        }

        for (int e = 0; e < len; e++) { // Runs through all characters in the employee number to check if its only numbers

            if (Character.isLetter(empNumString.charAt(e)) == true) { // If a character is a letter, check = flag
                System.out.println("Employee Number not a valid integer.");
                check = "flag";
                return;
            }
        }

        if (check !=  "flag") { // Will only execute if != flag, Want this to only execute once outside of the for loop
            empNum = Integer.parseInt(empNumString);
        }
        
        boolean dupNumCheck = addHT.checkDuplicateNum(empNum);
        if (dupNumCheck == true) {
            System.out.println("Error: Duplicate Employee Number!");
            return;
        }
        
        // If any inputs are invalid, return here (Its here because we want it to check all variables above before returning)
        if (empNumString.length() <= 0) {
            return;
        }
        if (firstName.length() <= 0) {
            return;
        }
        if (lastName.length() <= 0) {
            return;
        }
        
        // Setting gender variables
        if (maleGender.isSelected() == true) {
            gender = 0;
        }
        if (femaleGender.isSelected() == true) {
            gender = 1;
        }
        if (otherGender.isSelected() == true) {
            gender = 2;
        }
        if ((maleGender.isSelected() == false) && (femaleGender.isSelected() == false) && (otherGender.isSelected() == false)) {
            System.out.println("Error: No gender selected! ");
            return;
        }
        //
        // </editor-fold>
        
        // <editor-fold defaultstate="collapsed" desc="Full Time Stuff">
        if (fullTimeStatus.isSelected() == true) { // Full-Time specific variable checks
            String annualSalary = annualSalaryField.getText();
            
            if (annualSalary == annualSalary) {
                String checkSal = null;
                if (annualSalary.length() <= 0) {
                    System.out.println("Nothing in Annual Salary.");
                    return;
                }
                if (annualSalary.length() > 9) { // Max 9 because I found that parsing will error if any larger
                    System.out.println("Employee Number is too long.");
                    return;

                }

                for (int b = 0; b < annualSalary.length(); b++) { // Check for loop all characters in annual salary to make sure valid input

                    if (Character.isLetter(annualSalary.charAt(b)) == true) { // If any letters, set check = flag so parse will not run
                        System.out.println("Not a valid number.");
                        checkSal = "flag";
                        return;
                    }
                }

                if (checkSal !=  "flag") { // Parse annual salary to a double
                    salaryAnnual = Double.parseDouble(annualSalary);
                }
            }
            
            if (useDefault.isSelected() == true) { // If Use default deduction rate selected, add new FTE with deduct rate 0.21
                FTE theFTE = new FTE(empNum, firstName, lastName, gender, workLoc, 0.21, salaryAnnual);
                addHT.add(theFTE);
                System.out.println("\nAdded new Full-Time employee: " + theFTE.employeeNum);
            }
            if (useCustom.isSelected() == true) { // If use custom deduction rate is selected, add new FTE with user-entered deduct rate
                String deduct = deductField.getText();
                Double deductDouble = Double.parseDouble(deduct);
                FTE theFTE = new FTE(empNum, firstName, lastName, gender, workLoc, deductDouble, salaryAnnual);
                addHT.add(theFTE);
                System.out.println("\nAdded new Full-Time employee: " + theFTE.employeeNum);
            }

        } // end of full time
        // </editor-fold>
 
        // <editor-fold defaultstate="collapsed" desc="Part Time Stuff">
        if (partTimeStatus.isSelected() == true) {
            // <editor-fold defaultstate="collapsed" desc="HOURS WAGE CHECK">
            String hoursWage = hoursField.getText();
            
            if (hoursWage == hoursWage) { // Same checks to validate size of input
                String checkSal = null;
                if (hoursWage.length() <= 0) {
                    System.out.println("Nothing in hourly wage.");
                    return;
                }
                if (hoursWage.length() > 9) { // Parse doesn't seem to be able to parse any bigger than 9 digits
                    System.out.println("Hourly wage is too long.");
                    return;

                }

                for (int b = 0; b < hoursWage.length(); b++) { // Check for letters in hourly wage inputs

                    if (Character.isLetter(hoursWage.charAt(b)) == true) { // Letter check
                        System.out.println("Not a valid number.");
                        checkSal = "flag";
                        return;
                    }
                }

                if (checkSal !=  "flag") { // Parse hourly wage to double
                    wageHours = Double.parseDouble(hoursWage);
                }
            }// </editor-fold>
            
            // <editor-fold defaultstate="collapsed" desc="HOURS PER WEEK CHECK">
            String weeksValue = weeksField.getText();
            
            if (weeksValue == weeksValue) { // Same checks are hourly wage for hours per week
                String checkSal = null;
                if (weeksValue.length() <= 0) {
                    System.out.println("Nothing in hours per week.");
                    return;
                }
                if (weeksValue.length() > 9) {
                    System.out.println("Hours per week is too long.");
                    return;

                }

                for (int b = 0; b < weeksValue.length(); b++) {

                    if (Character.isLetter(weeksValue.charAt(b)) == true) {
                        System.out.println("Not a valid number.");
                        checkSal = "flag";
                        return;
                    }
                }

                if (checkSal !=  "flag") {
                    weeksVal = Double.parseDouble(weeksValue);
                }
            }// </editor-fold>
            
            // <editor-fold defaultstate="collapsed" desc="WEEKS PER YEAR CHECK">
            String yearsValue = yearsField.getText();
            
            if (yearsValue == yearsValue) {  // Same checks are hourly wage checks for weeks per year.
                String checkSal = null;
                if (yearsValue.length() <= 0) {
                    System.out.println("Nothing in Weeks per year.");
                    return;
                }
                if (yearsValue.length() > 9) {
                    System.out.println("Weeks per year is too long.");
                    return;

                }

                for (int b = 0; b < yearsValue.length(); b++) {

                    if (Character.isLetter(yearsValue.charAt(b)) == true) {
                        System.out.println("Not a valid number.");
                        checkSal = "flag";
                        return;
                    }
                }

                if (checkSal !=  "flag") {
                    yearsVal = Double.parseDouble(yearsValue);
                }
            }// </editor-fold>
            
            if (useDefault.isSelected() == true) { // Add new PTE with default deduction rate
                PTE thePTE = new PTE(empNum, firstName, lastName, gender, workLoc, 0.21, wageHours, weeksVal, yearsVal); 
                addHT.add(thePTE);
                System.out.println("\nAdded new Part-Time employee: " + thePTE.employeeNum);
            }
            if (useCustom.isSelected() == true) { // Add new PTE with custom deduction rate.
                String deduct = deductField.getText();
                Double deductDouble = Double.parseDouble(deduct);
                PTE thePTE = new PTE(empNum, firstName, lastName, gender, workLoc, deductDouble, wageHours, weeksVal, yearsVal);
                addHT.add(thePTE);
                System.out.println("\nAdded new Part-Time employee: " + thePTE.employeeNum);
            }
        }// end of partime selected

        // End of part time stuff
        // </editor-fold>
        
     //end of add   
    }//GEN-LAST:event_finishAddActionPerformed

    private void inputFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputFirstNameActionPerformed

    private void inputLastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputLastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputLastNameActionPerformed

    private void fullTimeStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullTimeStatusActionPerformed
        // TODO add your handling code here:
        fullTimeFrame.setVisible(true);
        partTimeFrame.setVisible(false);
        annualSalaryField.setFocusable(true);
        hoursField.setFocusable(false);
        weeksField.setFocusable(false);
        yearsField.setFocusable(false);
    }//GEN-LAST:event_fullTimeStatusActionPerformed

    private void partTimeStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_partTimeStatusActionPerformed
        // TODO add your handling code here:
        partTimeFrame.setVisible(true);
        fullTimeFrame.setVisible(false);
        annualSalaryField.setFocusable(false);
        hoursField.setFocusable(true);
        weeksField.setFocusable(true);
        yearsField.setFocusable(true);
    }//GEN-LAST:event_partTimeStatusActionPerformed

    private void useDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useDefaultActionPerformed
        // TODO add your handling code here:
        deductField.setEditable(false);
        deductField.setFocusable(false);
        deductField.setText("0.21");
    }//GEN-LAST:event_useDefaultActionPerformed

    private void useCustomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useCustomActionPerformed
        // TODO add your handling code here:
        deductField.setEditable(true);
        deductField.setFocusable(true);
    }//GEN-LAST:event_useCustomActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField annualSalaryField;
    private javax.swing.JTextField deductField;
    private javax.swing.ButtonGroup deductGroup;
    private javax.swing.ButtonGroup empNoButtonGroup;
    private javax.swing.ButtonGroup empStatButtonGroup;
    private javax.swing.JButton exitButton;
    private javax.swing.JRadioButton femaleGender;
    private javax.swing.JButton finishAdd;
    private javax.swing.JInternalFrame fullTimeFrame;
    private javax.swing.JRadioButton fullTimeStatus;
    private javax.swing.JRadioButton genEmpNum;
    private javax.swing.ButtonGroup genderGroup;
    private javax.swing.JTextField hoursField;
    private javax.swing.JTextField inputEmpNum;
    private javax.swing.JTextField inputFirstName;
    private javax.swing.JTextField inputLastName;
    private javax.swing.JTextField inputWorkLoc;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JRadioButton maleGender;
    private javax.swing.JRadioButton otherGender;
    private javax.swing.JInternalFrame partTimeFrame;
    private javax.swing.JRadioButton partTimeStatus;
    private javax.swing.JRadioButton setEmpNum;
    private javax.swing.JRadioButton useCustom;
    private javax.swing.JRadioButton useDefault;
    private javax.swing.JTextField weeksField;
    private javax.swing.JTextField yearsField;
    // End of variables declaration//GEN-END:variables
}
